
schema S = literal : sql {
 entities
   a b
 foreign_keys
   has : b -> a
 attributes
   i : a -> Varchar
   j : a -> Varchar
   k : b -> Varchar
   m : b -> Varchar
}


schema T = literal : sql {
 entities
   c d
 foreign_keys
   has_c : d -> c
   has_d : c -> d
 attributes
   i : c -> Varchar
   j : d -> Varchar
   k : c -> Varchar
   m : d -> Varchar
}

schema R = T

schema X = literal : sql {
 entities
   n
 foreign_keys

 attributes
   i : n -> Varchar
   j : n -> Varchar
   k : n -> Varchar
   m : n -> Varchar
}


mapping F = literal : S -> X {
 entity a -> n
   attributes
     i -> i
     j -> j
 entity b -> n
   foreign_keys has -> n
   attributes
     k -> k
     m -> m
}


mapping G = literal : T -> X {
 entity c -> n
   foreign_keys has_d -> n
   attributes
     i -> i
     k -> k
 entity d -> n
   foreign_keys has_c -> n
   attributes
     j -> j
     m -> m
}


instance Js = literal : S {
 generators
   a1 a2 a3 a4 : a
   b1 b2 : b
 equations
   a1.i = "a1i" a1.j = "a1j"
   b1.has = a1 b1.k = "b1k" b1.m = "b1m"
   a2.i = "a2i" a2.j = "a2j"

   a3.i = "a3i" a3.j = "a3j"
   b2.has = a3 b2.k = "b2k" b2.m = "b2m"
   a4.i = "a4i" a4.j = "a4j"
}

instance Jx = sigma F Js
instance Jt = delta G sigma F Js

// the JtSigma is isomorphic with the target JtGoal
instance JtGoal = literal : T {
  generators
    c1 c2 c3 c4 : c
    d1 d2 d3 d4 : d
  equations
    c1.i = "a1i" c1.k = "b1k" c1.has_d = d1
    c2.i = "a2i"              c2.has_d = d2
    c3.i = "a3i" c3.k = "b2k" c3.has_d = d3
    c4.i = "a4i"              c4.has_d = d4

    d1.j = "a1j" d1.m = "b1m" d1.has_c = c1
    d2.j = "a2j"              d2.has_c = c2
    d3.j = "a3j" d3.m = "b2m" d3.has_c = c3
    d4.j = "a4j"              d4.has_c = c4
  }

query QF = toQuery F
query QG = toCoQuery G
query Qx = [ QG ; QF ]

instance JsRT = eval Qx JtGoal
// JsRT should be isomorphic with Js


query Qs_a = literal : S -> R {
  entity c -> {
  	from B1: b
    attributes
	  i -> B1.has.i
	  k -> B1.k

    foreign_keys
	  has_d -> {
	    B2 -> B1
	  }
  }
  entity d -> {
  	from
	  B2 : b
    attributes
	  j -> B2.has.j
	  m -> B2.m
    foreign_keys
	  has_c -> {
	    B1 -> B2
	  }
  }
}

instance Ks_a = eval Qs_a Js
query Qt_a = [ Qx ; Qs_a ]
instance Kt_a = eval Qt_a JtGoal

query Qs_b = literal : S -> R {
 entity c -> {
   from ca:a cb:b
   attributes
     i -> i(ca)
     k -> k(cb)
   foreign_keys
     // has_d : c -> d
     has_d -> {da -> ca   db -> cb}
    }
 entity d -> {
   from da:a db:b
   attributes
     j -> j(da)
     m -> m(db)
   foreign_keys
     // has_c : d -> c
     has_c -> {ca -> da   cb -> db}
 }
}

instance Ks_b = eval Qs_b Js
query Qt_b = [ Qx ; Qs_b ]
instance Kt_b = eval Qt_b JtGoal
