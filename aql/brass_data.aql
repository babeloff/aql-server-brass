typeside sql1 = literal {
        imports sql
        java_types
          Geo = "java.lang.Long"
        java_constants
          Geo = "return java.lang.Long.decode(input[0])"
        java_functions
          EqualStr : String, String -> Bool = "return input[0].equals(input[1])"
          EqualVc : Varchar, Varchar -> Bool = "return input[0].equals(input[1])"
          EqualInt : Integer, Integer -> Bool = "return input[0].equals(input[1])"
          OrBool : Bool, Bool -> Bool = "return input[0] || input[1]"
        }
typeside sql2 = literal {
     imports sql
     java_types
       Geo = "java.lang.Long"
     java_constants
       Geo = "return java.lang.Long.decode(input[0])"
     java_functions
       int_to_real : Bigint -> Real = "return 0.0 + input[0]"
       real_to_int : Real -> Bigint = "return Math.round(input[0]).longValue()"
       date_to_int : Timestamp -> Bigint = "return input[0].getTime()"
       int_to_date : Bigint -> Timestamp = "return new java.util.Date(input[0])"
       txt_to_vc : Text -> Varchar = "return input[0]"
       vc_to_txt : Varchar -> Text = "return input[0]"
       real_to_geo : Real -> Geo = "return Math.round(input[0] * 1E6).longValue()"
       geo_to_real : Geo -> Real = "return input[0] / 1E6"
       now : -> Timestamp = "return java.util.Date.from(java.time.Instant.now())"
       eqVc : Varchar, Varchar -> Boolean = "return input[0].equals(input[1])"
       eqInt : Bigint, Bigint -> Boolean = "return input[0] == input[1]"
       // or : Boolean, Boolean -> Boolean = "return input[0] || input[1]")
     }
  
schema S = literal : sql1 {
  entities 
    cot_position
    cot_event
    source
  foreign_keys 
    source_id : cot_event -> source
    has_cot_event : cot_position -> cot_event
  attributes 
    name : source -> Varchar
    channel : source -> Varchar
    cot_type : cot_event -> Varchar
    how : cot_event -> Varchar
    detail : cot_event -> Text
    servertime : cot_event -> Bigint
    point_hae : cot_position -> Integer
    point_ce : cot_position -> Integer
    point_le : cot_position -> Integer
    tileX : cot_position -> Integer
    tileY : cot_position -> Integer
    latitude : cot_position -> Real
    longitude : cot_position -> Real
}

schema X = literal : sql1 {
  entities 
    cot_cospan
  attributes 
    name : cot_cospan -> Varchar
    channel : cot_cospan -> Varchar
    cot_type : cot_cospan -> Varchar
    how : cot_cospan -> Varchar
    detail : cot_cospan -> Text
    servertime : cot_cospan -> Bigint
    point_hae : cot_cospan -> Integer
    point_ce : cot_cospan -> Integer
    point_le : cot_cospan -> Integer
    tileX : cot_cospan -> Integer
    tileY : cot_cospan -> Integer
    latitude : cot_cospan -> Real
    longitude : cot_cospan -> Real
}

mapping F = literal : S -> X {
  entity source -> cot_cospan
    attributes 
      name -> name
      channel -> channel
  entity cot_event -> cot_cospan
    foreign_keys 
      source_id -> cot_cospan
    attributes 
      cot_type -> cot_type
      how -> how
      detail -> detail
      servertime -> servertime
  entity cot_position -> cot_cospan
    foreign_keys 
      has_cot_event -> cot_cospan
    attributes 
      point_hae -> point_hae
      point_ce -> point_ce
      point_le -> point_le
      tileX -> tileX
      tileY -> tileY
      latitude -> latitude
      longitude -> longitude
}

schema T = literal : sql1 {
  entities 
    cot_action
    source
    cot_detail
  foreign_keys 
    source_id : cot_action -> source
    has_cot_action : cot_detail -> cot_action
    has_cot_detail : cot_action -> cot_detail
  attributes 
    tileY : cot_detail -> Integer
    point_ce : cot_action -> Integer
    servertime : cot_action -> Bigint
    longitude : cot_action -> Real
    cot_type : cot_detail -> Varchar
    detail : cot_detail -> Text
    latitude : cot_action -> Real
    name : source -> Varchar
    tileX : cot_action -> Integer
    point_le : cot_action -> Integer
    how : cot_action -> Varchar
    channel : source -> Varchar
    point_hae : cot_detail -> Integer
}

mapping G = literal : T -> X {
  entity cot_detail -> cot_cospan
    foreign_keys 
      has_cot_action -> cot_cospan
    attributes 
      point_hae -> point_hae
      detail -> detail
      tileY -> tileY
      cot_type -> cot_type
  entity cot_action -> cot_cospan
    foreign_keys 
      source_id -> cot_cospan
      has_cot_detail -> cot_cospan
    attributes 
      how -> how
      servertime -> servertime
      point_ce -> point_ce
      point_le -> point_le
      tileX -> tileX
      longitude -> longitude
      latitude -> latitude
  entity source -> cot_cospan
    attributes 
      name -> name
      channel -> channel
}

query Qx = [ toCoQuery G ; toQuery F ]
query Qs_01 = simple : S  {
    from
     ce:cot_event
    where
     ce.cot_type = "a-n-A-C-F-m"
    attributes
     // source_id -> ce.source_id
     cot_type -> ce.cot_type
    }
query Qt_01 = [ Qx ; Qs_01 ]
query Qs_02 = simple : S  {
    from
     ce:cot_event
    where
     ce.servertime = "1494174900"
    attributes
     // source_id -> ce.source_id
     cot_type -> ce.cot_type
     how -> ce.how
    }
query Qt_02 = [ Qx ; Qs_02 ]
query Qs_03 = simple : S {
     from ce : cot_event
     where
       ce.servertime = "1494174900"
       ce.cot_type = "a-n-A-C-F-m"
     attributes
       // source_id -> ce.source_id
       cot_type -> ce.cot_type
       how -> ce.how
     }
query Qt_03 = [ Qx ; Qs_03 ]
query Qs_04 = simple : S {
     from
       ce : cot_event
       s : source
     where
       s = ce.source_id
       s.channel = "7"
     attributes
       name -> s.name
       cot_type -> ce.cot_type
       time -> ce.servertime
  }
query Qt_04 = [ Qx ; Qs_04 ]

  schema S5m = literal : sql {
    entities
          Qchan
          Qtype
      attributes
          name : Qchan -> Varchar
          time : Qchan -> Bigint
          type : Qchan -> Varchar
          channel : Qchan -> Varchar

          name : Qtype -> Varchar
          time : Qtype -> Bigint
          type : Qtype -> Varchar
          channel : Qtype -> Varchar
  }

  query Qm_05 = literal : S -> S5m {
    entity
      Qchan -> {
        from
          s : source
          ce : cot_event
        where
          s = ce.source_id
          s.channel = "3"
        attributes
          name -> s.name
          type -> ce.cot_type
          channel -> s.channel
          time -> ce.servertime
        }
    entity
     Qtype -> {
       from
         s : source
         ce : cot_event
       where
         s = ce.source_id
         ce.cot_type = "a-n-A-C-F-m"
       attributes
       name -> s.name
       type -> ce.cot_type
       channel -> s.channel
       time -> ce.servertime
       }
  }
query Qn_05 = [ Qx ; Qm_05 ]

  query Qs_05 = simple : S {
    from
      "(c,ce)" : cot_event
      "(t,ce)" : cot_event
    where
      "(c,ce)".servertime = "(t,ce)".servertime
      "(c,ce)".source_id.name = "(t,ce)".source_id.name

      "(c,ce)".source_id.channel = "3"
      "(t,ce)".cot_type = "a-n-A-C-F-m"
    attributes
      channel -> "(c,ce)".source_id.channel
      name -> "(c,ce)".source_id.name
      time -> "(c,ce)".servertime
      type_c -> "(c,ce)".cot_type
      type_t -> "(t,ce)".cot_type
  }
query Qt_05 = [ Qx ; Qs_05 ]
query Qs_06s = simple : S {
    from
      ce : cot_event
      s : source
    where
      s = ce.source_id
      OrBool(EqualVc(s.channel,"5"),
             EqualVc(ce.cot_type,"a-n-A-C-F-m")) = true
    attributes
      name -> s.name
      cot_type -> ce.cot_type
      time -> ce.servertime
  }
query Qt_06s = [ Qx ; Qs_06s ]
query Qs_07s = simple : S {
    from
      ce : cot_event
      cep : cot_position
      s : source
    where
      s = ce.source_id
      ce = cep.has_cot_event
      s.channel = 3
      cep.tileX = 18830
      cep.tileY = 25704
    attributes
      name -> s.name
      cot_type -> ce.cot_type
      time -> ce.servertime
    }
query Qt_07s = [ Qx ; Qs_07s ]
schema S8 = literal : sql1 {
     entities
           Q
       attributes
           name : Q -> Varchar
           time : Q -> Bigint
           tileX : Q -> Integer
           tileY : Q -> Integer
   }
query Qs_08pre = literal : S -> S8 {
     params
        name_parm : Varchar
        servertime_parm : Bigint
     entity
       Q -> {
         from
           s : source
           ce : cot_event
           cep : cot_position
         where
           s = ce.source_id
           ce = cep.has_cot_event
           s.name = name_parm
           ce.servertime = servertime_parm
         attributes
           name -> s.name
           time -> ce.servertime
           tileX -> cep.tileX
           tileY -> cep.tileY
       }
    } 
// FIXME query Qt_08pre = [ Qx ; Qs_08pre ]
query Qs_08 = literal : S -> S8 {
     bindings
        name_parm = "A6A7DC"
        servertime_parm = "1494174900"
     imports Qs_08pre
  }
// FIXME query Qt_08 = [ Qx ; Qs_08 ]
schema S9 = literal : sql1 {
     entities
           Q
       attributes
           name : Q -> Varchar
           time : Q -> Bigint
           tileX : Q -> Integer
           tileY : Q -> Integer
     }
query Qs_09pre = literal : S -> S9 {
    params
       name_param : Varchar
       servertime_param : Bigint
     entity
       Q -> {
         from
           s : source
           ce : cot_event
           cep : cot_position
         where
           s = ce.source_id
           ce = cep.has_cot_event
           s.name = name_param
           ce.servertime = servertime_param
         attributes
           name -> s.name
           time -> ce.servertime
           tileX -> cep.tileX
           tileY -> cep.tileY
         }
     }
// FIXME query Qt_09pre = [ Qx ; Qs_09pre ]
query Qs_09 = literal : S -> S9 {
     bindings
        name_param = "A6A7DC"
        servertime_param = "1494174900"

     imports Qs_09pre
  }
// FIXME query Qt_09 = [ Qx ; Qs_09 ]
