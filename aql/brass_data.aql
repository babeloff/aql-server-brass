typeside sql1 = literal {
        imports sql
        java_functions
            EqualStr : String, String -> Bool = "return input[0].equals(input[1])"
            EqualVc : Varchar, Varchar -> Bool = "return input[0].equals(input[1])"
            EqualInt : Integer, Integer -> Bool = "return input[0].equals(input[1])"
        }
typeside sql2 = literal {
     imports sql
     java_types
       Geo = "java.lang.Long"
     java_constants
       Geo = "return java.lang.Long.decode(input[0])"
     java_functions
       int_to_real : Bigint -> Real = "return 0.0 + input[0]"
       real_to_int : Real -> Bigint = "return Math.round(input[0]).longValue()"
       date_to_int : Timestamp -> Bigint = "return input[0].getTime()"
       int_to_date : Bigint -> Timestamp = "return new java.util.Date(input[0])"
       txt_to_vc : Text -> Varchar = "return input[0]"
       vc_to_txt : Varchar -> Text = "return input[0]"
       real_to_geo : Real -> Geo = "return Math.round(input[0] * 1E6).longValue()"
       geo_to_real : Geo -> Real = "return input[0] / 1E6"
       now : -> Timestamp = "return java.util.Date.from(java.time.Instant.now())"
       eqVc : Varchar, Varchar -> Boolean = "return input[0].equals(input[1])"
       eqInt : Bigint, Bigint -> Boolean = "return input[0] == input[1]"
       // or : Boolean, Boolean -> Boolean = "return input[0] || input[1]")
     }
  
schema S = literal : sql1 {
  entities 
    cot_position
    cot_event
    source
  foreign_keys 
    source_id : cot_event -> source
    has_cot_event : cot_position -> cot_event
  attributes 
    tileY : cot_position -> Integer
    point_ce : cot_position -> Integer
    servertime : cot_event -> Bigint
    longitude : cot_position -> Real
    cot_type : cot_event -> Varchar
    detail : cot_event -> Text
    latitude : cot_position -> Real
    name : source -> Varchar
    tileX : cot_position -> Integer
    point_le : cot_position -> Integer
    how : cot_event -> Varchar
    channel : source -> Varchar
    point_hae : cot_position -> Integer
}

schema X = literal : sql1 {
  entities 
    cot_cospan
  attributes 
    tileY : cot_cospan -> Integer
    point_ce : cot_cospan -> Integer
    servertime : cot_cospan -> Bigint
    longitude : cot_cospan -> Real
    cot_type : cot_cospan -> Varchar
    detail : cot_cospan -> Text
    latitude : cot_cospan -> Real
    name : cot_cospan -> Varchar
    tileX : cot_cospan -> Integer
    point_le : cot_cospan -> Integer
    how : cot_cospan -> Varchar
    channel : cot_cospan -> Varchar
    point_hae : cot_cospan -> Integer
}

mapping F = literal : S -> X {
  entity source -> cot_cospan
    attributes 
      name -> name
      channel -> channel
  entity cot_event -> cot_cospan
    foreign_keys 
      source_id -> cot_cospan
    attributes 
      cot_type -> cot_type
      how -> how
      detail -> detail
      servertime -> servertime
  entity cot_position -> cot_cospan
    foreign_keys 
      has_cot_event -> cot_cospan
    attributes 
      point_hae -> point_hae
      point_ce -> point_ce
      point_le -> point_le
      tileX -> tileX
      tileY -> tileY
      latitude -> latitude
      longitude -> longitude
}

schema T = literal : sql1 {
  entities 
    cot_action
    source
    cot_detail
  foreign_keys 
    source_id : cot_action -> source
    has_cot_action : cot_detail -> cot_action
    has_cot_detail : cot_action -> cot_detail
  attributes 
    tileY : cot_detail -> Integer
    point_ce : cot_action -> Integer
    servertime : cot_action -> Bigint
    longitude : cot_action -> Real
    cot_type : cot_detail -> Varchar
    detail : cot_detail -> Text
    latitude : cot_action -> Real
    name : source -> Varchar
    tileX : cot_action -> Integer
    point_le : cot_action -> Integer
    how : cot_action -> Varchar
    channel : source -> Varchar
    point_hae : cot_detail -> Integer
}

mapping G = literal : T -> X {
  entity cot_detail -> cot_cospan
    foreign_keys 
      has_cot_action -> cot_cospan
    attributes 
      point_hae -> point_hae
      detail -> detail
      tileY -> tileY
      cot_type -> cot_type
  entity cot_action -> cot_cospan
    foreign_keys 
      source_id -> cot_cospan
      has_cot_detail -> cot_cospan
    attributes 
      how -> how
      servertime -> servertime
      point_ce -> point_ce
      point_le -> point_le
      tileX -> tileX
      longitude -> longitude
      latitude -> latitude
  entity source -> cot_cospan
    attributes 
      name -> name
      channel -> channel
}

query Qx = [ toCoQuery G ; toQuery F ]
query Qs_01 = simple : S  {
    from
     ce:cot_event
    where
     ce.cot_type = "a-n-A-C-F-m"
    attributes
     // source_id -> ce.source_id
     cot_type -> ce.cot_type
    }
query Qt_01 = [ Qx ; Qs_01 ]
query Qs_02 = simple : S  {
    from
     ce:cot_event
    where
     ce.servertime = "1494174900"
    attributes
     // source_id -> ce.source_id
     cot_type -> ce.cot_type
     how -> ce.how
    }
query Qt_02 = [ Qx ; Qs_02 ]
query Qs_03 = simple : S {
     from ce : cot_event
     where
       ce.servertime = "1494174900"
       ce.cot_type = "a-n-A-C-F-m"
     attributes
       // source_id -> ce.source_id
       cot_type -> ce.cot_type
       how -> ce.how
     }
query Qt_03 = [ Qx ; Qs_03 ]
query Qs_04 = simple : S {
     from
       ce : cot_event
       s : source
     where
       s = ce.source_id
       s.channel = "7"
     attributes
       name -> s.name
       cot_type -> ce.cot_type
       time -> ce.servertime
  }
query Qt_04 = [ Qx ; Qs_04 ]
schema S5 = literal : sql1 {
    entities
          Q
      attributes
          name : Q -> Varchar
          time : Q -> Bigint
          type : Q -> Varchar
          channel : Q -> Varchar
  }
query Qs_05 = literal : S -> S5 {
     entity Q -> {
       from
         ce : cot_event
         s : source
       where
         s = ce.source_id
       attributes
         name -> s.name
         type -> ce.cot_type
         channel -> s.channel
         time -> ce.servertime
     }
    }
query Qt_05 = [ Qx ; Qs_05 ]
